/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 --types ./public/clock.glb --transform -s
*/

import { useGLTF } from "@react-three/drei";
import { useEffect, useState } from "react";
import * as THREE from "three";
import { GLTF } from "three-stdlib";
import { useSetupMaterial } from "./useSetupMaterial";

type GLTFResult = GLTF & {
  nodes: {
    clockShellMesh: THREE.Mesh;
    clockShellMesh_1: THREE.Mesh;
    glass: THREE.Mesh;
    minutesMarker: THREE.Mesh;
    clockText: THREE.Mesh;
    handHour: THREE.Mesh;
    handMinute: THREE.Mesh;
    handSecond: THREE.Mesh;
    handPin: THREE.Mesh;
  };
  materials: {
    clockShellFaceMaterial: THREE.MeshStandardMaterial;
    ClockShellMaterial: THREE.MeshStandardMaterial;
  };
};

function Clock(props: JSX.IntrinsicElements["group"]) {
  const { nodes } = useGLTF("/clock-transformed.glb") as GLTFResult;
  const {
    glassMaterial,
    clockShellMaterial,
    clockHandMaterial,
    clockFaceMaterial,
    clockTextMaterial,
  } = useSetupMaterial();

  const [hours, setHours] = useState(0);
  const [minutes, setMinutes] = useState(0);
  const [seconds, setSeconds] = useState(0);

  const minuteHandRotation = -THREE.MathUtils.degToRad(minutes * 6);
  const hourHandRotation = -THREE.MathUtils.degToRad(hours * 30);
  const secondHandRotation = -THREE.MathUtils.degToRad(seconds * 6);

  useEffect(() => {
    const timer = setTimeout(() => {
      const time = new Date();
      setHours(time.getHours());
      setMinutes(time.getMinutes());
      setSeconds(time.getSeconds());
    }, 1000);

    return () => {
      clearTimeout(timer);
    };
  }, [seconds]);

  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.glass.geometry}
        material={glassMaterial}
        scale={1.88}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.minutesMarker.geometry}
        material={nodes.minutesMarker.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.clockText.geometry}
        material={clockTextMaterial}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.handHour.geometry}
        material={clockHandMaterial}
        rotation={[0, 0, hourHandRotation]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.handMinute.geometry}
        material={clockHandMaterial}
        rotation={[0, 0, minuteHandRotation]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.handSecond.geometry}
        material={clockHandMaterial}
        rotation={[0, 0, secondHandRotation]}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.handPin.geometry}
        material={clockHandMaterial}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.clockShellMesh.geometry}
        material={clockFaceMaterial}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.clockShellMesh_1.geometry}
        material={clockShellMaterial}
      />
    </group>
  );
}

useGLTF.preload("/clock-transformed.glb");

export default Clock;
