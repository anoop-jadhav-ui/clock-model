/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 --types ./public/clock.glb --transform -s
*/

import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useRef, useTransition } from "react";
import * as THREE from "three";
import { GLTF } from "three-stdlib";
import { LoadingCube } from "../Loader3D/LoadingCube";
import { useCurrentTime } from "./useCurrentTime";
import { useSetupMaterial } from "./useSetupMaterial";

type GLTFResult = GLTF & {
  nodes: {
    clockShellMesh: THREE.Mesh;
    clockShellMesh_1: THREE.Mesh;
    glass: THREE.Mesh;
    minutesMarker: THREE.Mesh;
    clockText: THREE.Mesh;
    handHour: THREE.Mesh;
    handMinute: THREE.Mesh;
    handSecond: THREE.Mesh;
    handPin: THREE.Mesh;
  };
  materials: {
    clockShellFaceMaterial: THREE.MeshStandardMaterial;
    ClockShellMaterial: THREE.MeshStandardMaterial;
  };
};

function Clock(props: JSX.IntrinsicElements["group"]) {
  const { hours, minutes, seconds, isLoading } = useCurrentTime();
  const { nodes } = useGLTF("/clock-transformed.glb") as GLTFResult;
  const {
    showGlass,
    glassMaterial,
    clockShellMaterial,
    clockHandMaterial,
    clockFaceMaterial,
    clockTextMaterial,
  } = useSetupMaterial();

  const [, startTransition] = useTransition();

  const secondHandRef = useRef<THREE.Mesh>(null);
  const minuteHandRef = useRef<THREE.Mesh>(null);
  const hourHandRef = useRef<THREE.Mesh>(null);

  useFrame(() => {
    startTransition(() => {
      if (
        secondHandRef.current &&
        minuteHandRef.current &&
        hourHandRef.current
      ) {
        secondHandRef.current.rotation.z = -THREE.MathUtils.degToRad(
          seconds * 6
        );
        minuteHandRef.current.rotation.z = -THREE.MathUtils.degToRad(
          minutes * 6
        );
        hourHandRef.current.rotation.z = -THREE.MathUtils.degToRad(hours * 30);
      }
    });
  });

  return (
    <>
      {isLoading && <LoadingCube />}
      {!isLoading && (
        <group {...props} dispose={null} scale={[1.2, 1.2, 1.2]}>
          {showGlass && (
            <mesh
              castShadow
              receiveShadow
              geometry={nodes.glass.geometry}
              material={glassMaterial}
            />
          )}
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.minutesMarker.geometry}
            material={nodes.minutesMarker.material}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.clockText.geometry}
            material={clockTextMaterial}
          />
          <mesh
            ref={hourHandRef}
            castShadow
            receiveShadow
            geometry={nodes.handHour.geometry}
            material={clockHandMaterial}
          />
          <mesh
            ref={minuteHandRef}
            castShadow
            receiveShadow
            geometry={nodes.handMinute.geometry}
            material={clockHandMaterial}
          />
          <mesh
            ref={secondHandRef}
            castShadow
            receiveShadow
            geometry={nodes.handSecond.geometry}
            material={clockHandMaterial}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.handPin.geometry}
            material={clockHandMaterial}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.clockShellMesh.geometry}
            material={clockFaceMaterial}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.clockShellMesh_1.geometry}
            material={clockShellMaterial}
          />
        </group>
      )}
    </>
  );
}

useGLTF.preload("/clock-transformed.glb");

export default Clock;
