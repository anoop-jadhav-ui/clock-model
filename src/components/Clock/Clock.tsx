/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 --types ./public/clock.glb --transform -s
*/

import { useGLTF } from "@react-three/drei";
import { useControls } from "leva";
import * as THREE from "three";
import { GLTF } from "three-stdlib";

type GLTFResult = GLTF & {
  nodes: {
    clockShellMesh: THREE.Mesh;
    clockShellMesh_1: THREE.Mesh;
    glass: THREE.Mesh;
    minutesMarker: THREE.Mesh;
    clockText: THREE.Mesh;
    handHour: THREE.Mesh;
    handMinute: THREE.Mesh;
    handSecond: THREE.Mesh;
    handPin: THREE.Mesh;
  };
  materials: {
    clockShellFaceMaterial: THREE.MeshStandardMaterial;
    ClockShellMaterial: THREE.MeshStandardMaterial;
  };
};

function Clock(props: JSX.IntrinsicElements["group"]) {
  const { nodes, materials } = useGLTF("/clock-transformed.glb") as GLTFResult;

  const { glassColor, clockShell, clockText, clockFace, clockHand } =
    useControls("Clock", {
      glassColor: "#fff",
      clockShell: "#f57e7e",
      clockText: "#fff",
      clockFace: "#908fd8",
      clockHand: "#f57e7e",
    });

  const glassMaterial = new THREE.MeshPhysicalMaterial({
    color: glassColor,
    roughness: 0,
    transmission: 1,
    ior: 1.33,
    clearcoat: 1,
  });

  const clockShellMaterial = new THREE.MeshPhysicalMaterial({
    color: clockShell,
    roughness: 1,
    clearcoat: 1,
  });

  const clockHandMaterial = new THREE.MeshPhysicalMaterial({
    color: clockHand,
    roughness: 1,
    clearcoat: 1,
  });

  const clockFaceMaterial = new THREE.MeshPhysicalMaterial({
    color: clockFace,
    roughness: 1,
    clearcoat: 1,
  });

  const clockTextMaterial = new THREE.MeshPhysicalMaterial({
    color: clockText,
    roughness: 1,
    clearcoat: 1,
  });

  return (
    <group {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.glass.geometry}
        material={glassMaterial}
        scale={1.88}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.minutesMarker.geometry}
        material={nodes.minutesMarker.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.clockText.geometry}
        material={clockTextMaterial}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.handHour.geometry}
        material={clockHandMaterial}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.handMinute.geometry}
        material={clockHandMaterial}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.handSecond.geometry}
        material={clockHandMaterial}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.handPin.geometry}
        material={clockHandMaterial}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.clockShellMesh.geometry}
        material={clockFaceMaterial}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.clockShellMesh_1.geometry}
        material={clockShellMaterial}
      />
    </group>
  );
}

useGLTF.preload("/clock-transformed.glb");

export default Clock;
